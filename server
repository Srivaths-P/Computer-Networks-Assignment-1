import socket

# Server Constants
SERVER_IP = "127.0.0.1"
SERVER_PORT = 5000
BUFFER_SIZE = 4096

# IP addresses pool of 15 addresses
IP_POOL = [
    "192.168.1.1", "192.168.1.2", "192.168.1.3", "192.168.1.4", "192.168.1.5",
    "192.168.1.6", "192.168.1.7", "192.168.1.8", "192.168.1.9", "192.168.1.10",
    "192.168.1.11", "192.168.1.12", "192.168.1.13", "192.168.1.14", "192.168.1.15"
]

# Rules for load-balancer routing
RULES = {
    "morning": {"time_range": "04:00-11:59", "hash_mod": 5, "ip_pool_start": 0},
    "afternoon": {"time_range": "12:00-19:59", "hash_mod": 5, "ip_pool_start": 5},
    "night": {"time_range": "20:00-03:59", "hash_mod": 5, "ip_pool_start": 10},
}


def load_balancer(header: str) -> str:
    """
    Resolves an IP address based on the logic applied to the custom header.
    """
    hour = int(header[0:2])
    id = int(header[6:8])

    if 4 <= hour <= 11:
        rule = RULES["morning"]
    elif 12 <= hour <= 19:
        rule = RULES["afternoon"]
    else:
        rule = RULES["night"]

    ip_pool_start = rule["ip_pool_start"]
    hash_mod = rule["hash_mod"]
    shift = id % hash_mod
    final_index = ip_pool_start + shift

    return IP_POOL[final_index]


# Initializing and running the server.
with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as server_socket:
    server_socket.bind((SERVER_IP, SERVER_PORT))
    print(f"DNS Server listening on {SERVER_IP}:{SERVER_PORT}")

    while True:
        try:
            message, client_address = server_socket.recvfrom(BUFFER_SIZE)
            custom_header = message[:8].decode('utf-8')
            
            print(f"Received request from {client_address}")
            print(f"Custom Header: {custom_header}")

            ip_addrr = load_balancer(custom_header)
            
            print(f" Resolved IP: {ip_addrr}")
            server_socket.sendto(ip_addrr.encode('utf-8'), client_address)

        except Exception as e:
            print(f"An error occurred: {e}")
